continue
Hash.from_xml('test')
Hash.from_xml(test)
Hash.from_xml(nil)
continue
DateTime.now
new_date = DateTime.new(date.year, date.month, date.day, 0, 0, 0, Time.now.zone.to_s)
new_date = DateTime.new(date.year, date.month, date.day, 0, 0, 0, Time.zone.to_s)
Time.now.zone.to_s
Time.now.zone
Time.now.zone.to_s
Time.now
Time.zone.to_s
Time.zone
Time.zone.to_s
continue
new_params
record_params
continue
new_params
record_params
params
continue
self.user_id
self.user
continue
@date
continue
params[:date].sort_by{|k,v| v }
params[:date]
params[:date].sort_by{|k,v| v }
params[:date].sort.map{|k,x| x}
params[:date].map{|k,x| x}
params[:date]
params[:date].to_h
params[:date].to_a
nil.to_i
Date.new(2015, 10, 11)
Date.new('2015', '10', '11')
Date.new(params[:date][:year], params[:date][:month], params[:date][:day])
continue
contunue
Date.new(date[:year], date[:mounth], date[:day])
date[:year]
date[:month]
date[:mounth]
date[:day]
Date.new(date[:year], date[:mounth], date[:day])
@date
continue
params[:date].map {|k, v| v}
params[:date].map {|k, v|}
params[:date]
params[:date].to_a.join
params[:date].to_a.to_s
params[:date].to_s
params[:date]
continue
@date = params[:date]
@date = DateTime.parse params[:date].to_s
@date = DateTime.parse params[:date]
continue
@date = Date.parse params[:date] rescue Date.current
@date = Date.parse params[:date]
continue
@date.type_of('Date')
@date.type_of Date
@date.class
@date = params[:date]
@date = params[date]
params
continue
self.sent_to
self.preparation!
self.sent_to
self.sent_to = self.user_id
self.sent_to
self.verification!
self.sent_to
self.user_id
self.state
self.preparation!
self.state
right
continue
self.rights.find_by(user_id: self.sent_to)
self.rights.find_by(id: self.sent_to)
self.rights
right
continue
@order.withdraw
@order.author?(current_user.id)
continue
truncate('', length: 117)
truncate(nil, length: 117)
continue
FileUtils.mv(Rails.root.join(file.path), Rails.root.join(file_path))
Rails.root.join(file_path)
Rails.root.join(file.path)
File.exist?(Rails.root.join(dir))
continue
File.exist?(Rails.root.join(file_path_for_db))
File.exist?(file.path)
File.exist?(Rails.root.join(file.path))
File.exist?(Rails.root.join(dir))
continue
subfolder
continue
@record[:date]
@record[:date] = @record.date + @record.date.localtime.utc_offset
@record[:date]
@record[:date] = @record.date.try(:localtime)
@record.date
@record.save
@record[:date] = @record.date.try(:localtime)
@record.date
@record[:date]
@record.date
continue
@record[:date]
@record[:date]= @record.date.try(:localtime)
@record[:date]
continue
@record.attributes
@record
continue
@record.date.try(:localtime)
 @record
continue
@record
@record.date = @record.date.try(:localtime)
@record
@record.date
@record.date = @record.date.try(:localtime)
@record.date.try(:localtime)
@record.date
continue
@record.date
continue
(@record.date.try(:localtime) or DateTime.now)
@record.date.try(:localtime)
@record
continue
@record
@record.date
@record.date.try(:localtime)
continue
DateTime.now.localtime
DateTime.localtime.utc_offset
DateTime.now.localtime.utc_offset
date - DateTime.now.localtime.utc_offset
date - date.localtime.utc_offset
date.localtime.utc_offset
date.localtime
date.utc
date
continue
date
continue
params
params[:to_jounal]
@order = Order.find_by(id: params[:to_jounal])
continue
@order = Order.find_by(id: params[:id])
Order.find_by(id: params[:id])
if @order = Order.find_by(id: params[:id])
if @order = Order.find_by(id: params[:to_jounal])
continue
params[:to_journal]
continue
params[:to_journal]
continue
params[:to_journal]
params
continue
params
continue
params[:id]
params[id]
params
exit
@eur_balance[:balance]
exit
@usd_balance[:balance]
@usd_balance
@usd_balance['balance']
continue
order.subject
continue
order.subject
continue
order.subject
continue
order.subject
continue
order.subject
continue
paid_amount
order.subject
continue
all_orders
options
exit
number_to_currency(12.004)
number_to_currency(12.005)
number_to_currency(12.006)
number_to_currency(12.001)
number_to_currency(12)
continue
@usd_balance
usd_balance
continue
new_quotation.value = "65,5628".gsub(',', '.')
continue
new_quotation.value = "65,5628".gsub(',', '.')
continue
new_quotation.value = "65,5628".gsub(',', '.')
value.gsub(',', '.')
continue
new_quotation.save
new_quotation.value = value.gsub(',', '.')
value.gsub(',', '.')
new_quotation.value = value.gsub(',', '.')
new_quotation = find_by(code: codes[code])
continue
hash
data
continue
usd
continue
nil.try("gsub('1','2')")
nil.try(gsub('1','2'))
nil.gsub('1','2') rescue 0
nil.gsub('1','2').rescue 0
nil.gsub('1','2')
a.to_s
a
a = BigDecimal.new(value)
value
continue
chf
eur
usd
continue
new_quotation
continue
new_quotation
continue
new_quotation
continue
find_by(code: 'lalala')
find_by(code: codes('EUR'))
find_by(code: code)
find_by(code: codes[:code])
find_by(code: codes[:code]
new_quotation
